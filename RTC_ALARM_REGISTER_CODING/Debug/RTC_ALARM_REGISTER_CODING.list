
RTC_ALARM_REGISTER_CODING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000840  08000848  00010848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000840  08000840  00010840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000844  08000844  00010844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010848  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010848  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000148f  00000000  00000000  00010878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000003db  00000000  00000000  00011d07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000130  00000000  00000000  000120e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  00012218  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000076e  00000000  00000000  00012310  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000bf3  00000000  00000000  00012a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00013671  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000374  00000000  00000000  000136f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00013a64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000828 	.word	0x08000828

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000828 	.word	0x08000828

080001c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80001d2:	4909      	ldr	r1, [pc, #36]	; (80001f8 <NVIC_EnableIRQ+0x30>)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	095b      	lsrs	r3, r3, #5
 80001da:	79fa      	ldrb	r2, [r7, #7]
 80001dc:	f002 021f 	and.w	r2, r2, #31
 80001e0:	2001      	movs	r0, #1
 80001e2:	fa00 f202 	lsl.w	r2, r0, r2
 80001e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000e100 	.word	0xe000e100

080001fc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	6039      	str	r1, [r7, #0]
 8000206:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020c:	2b00      	cmp	r3, #0
 800020e:	da0b      	bge.n	8000228 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000210:	490d      	ldr	r1, [pc, #52]	; (8000248 <NVIC_SetPriority+0x4c>)
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	f003 030f 	and.w	r3, r3, #15
 8000218:	3b04      	subs	r3, #4
 800021a:	683a      	ldr	r2, [r7, #0]
 800021c:	b2d2      	uxtb	r2, r2
 800021e:	0112      	lsls	r2, r2, #4
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	440b      	add	r3, r1
 8000224:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000226:	e009      	b.n	800023c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000228:	4908      	ldr	r1, [pc, #32]	; (800024c <NVIC_SetPriority+0x50>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	e000e100 	.word	0xe000e100

08000250 <main>:
void RTC_Set_Time_BCD(uint8_t saat, uint8_t dakika, uint8_t saniye);
void RTC_Set_Date_BCD(uint8_t yil, uint8_t ay, uint8_t gun, uint8_t hafta);
void RTC_Set_Alarm_A(uint8_t gun, uint8_t saat, uint8_t dakika, uint8_t saniye);

int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	CLK_Config();
 8000254:	f000 f816 	bl	8000284 <CLK_Config>
	GPIO_Config();
 8000258:	f000 f868 	bl	800032c <GPIO_Config>
	RTC_Config();
 800025c:	f000 f888 	bl	8000370 <RTC_Config>

	RTC_Set_Date_BCD(0x23,MAYIS,0x16,SALI);
 8000260:	2302      	movs	r3, #2
 8000262:	2216      	movs	r2, #22
 8000264:	2105      	movs	r1, #5
 8000266:	2023      	movs	r0, #35	; 0x23
 8000268:	f000 f908 	bl	800047c <RTC_Set_Date_BCD>
	RTC_Set_Time_BCD(0x17, 0x12,0x00);
 800026c:	2200      	movs	r2, #0
 800026e:	2112      	movs	r1, #18
 8000270:	2017      	movs	r0, #23
 8000272:	f000 f8d1 	bl	8000418 <RTC_Set_Time_BCD>
	RTC_Set_Alarm_A(0x16,0x17,0x13,0x00);
 8000276:	2300      	movs	r3, #0
 8000278:	2213      	movs	r2, #19
 800027a:	2117      	movs	r1, #23
 800027c:	2016      	movs	r0, #22
 800027e:	f000 f937 	bl	80004f0 <RTC_Set_Alarm_A>

  while (1)
 8000282:	e7fe      	b.n	8000282 <main+0x32>

08000284 <CLK_Config>:

  }
}

void CLK_Config() // Clock speed for 168MHz
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
	RCC->CR |= 0x00010000;                 // HSEON ENABLE
 8000288:	4a27      	ldr	r2, [pc, #156]	; (8000328 <CLK_Config+0xa4>)
 800028a:	4b27      	ldr	r3, [pc, #156]	; (8000328 <CLK_Config+0xa4>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000292:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 0x00020000));        // HSEON Ready Flag wait
 8000294:	bf00      	nop
 8000296:	4b24      	ldr	r3, [pc, #144]	; (8000328 <CLK_Config+0xa4>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d0f9      	beq.n	8000296 <CLK_Config+0x12>
	RCC->CR |= 0x00080000;              // CSS ENABLE
 80002a2:	4a21      	ldr	r2, [pc, #132]	; (8000328 <CLK_Config+0xa4>)
 80002a4:	4b20      	ldr	r3, [pc, #128]	; (8000328 <CLK_Config+0xa4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002ac:	6013      	str	r3, [r2, #0]
	RCC->CR |= 0x01000000;				// PLL ON
 80002ae:	4a1e      	ldr	r2, [pc, #120]	; (8000328 <CLK_Config+0xa4>)
 80002b0:	4b1d      	ldr	r3, [pc, #116]	; (8000328 <CLK_Config+0xa4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002b8:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x00400000;        // PLL SRC HSE is selected
 80002ba:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <CLK_Config+0xa4>)
 80002bc:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <CLK_Config+0xa4>)
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004;       // PLL M 4
 80002c6:	4a18      	ldr	r2, [pc, #96]	; (8000328 <CLK_Config+0xa4>)
 80002c8:	4b17      	ldr	r3, [pc, #92]	; (8000328 <CLK_Config+0xa4>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	f043 0304 	orr.w	r3, r3, #4
 80002d0:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00005A00;        // PLL N 168
 80002d2:	4a15      	ldr	r2, [pc, #84]	; (8000328 <CLK_Config+0xa4>)
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <CLK_Config+0xa4>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	f443 43b4 	orr.w	r3, r3, #23040	; 0x5a00
 80002dc:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000000;       // PLL P 2
 80002de:	4a12      	ldr	r2, [pc, #72]	; (8000328 <CLK_Config+0xa4>)
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <CLK_Config+0xa4>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 0x00000000;          // AHB PRESCALER 1
 80002e6:	4a10      	ldr	r2, [pc, #64]	; (8000328 <CLK_Config+0xa4>)
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <CLK_Config+0xa4>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00080000;          // APB2 PRESCALER 2
 80002ee:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <CLK_Config+0xa4>)
 80002f0:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <CLK_Config+0xa4>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002f8:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00001400;          // APB1 PRESCALER 4
 80002fa:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <CLK_Config+0xa4>)
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <CLK_Config+0xa4>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000304:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x00080000;             // HSE READY FLAG CLEAR
 8000306:	4a08      	ldr	r2, [pc, #32]	; (8000328 <CLK_Config+0xa4>)
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <CLK_Config+0xa4>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000310:	60d3      	str	r3, [r2, #12]
	RCC->CIR |= 0x00800000;             // CSS FLAG CLEAR
 8000312:	4a05      	ldr	r2, [pc, #20]	; (8000328 <CLK_Config+0xa4>)
 8000314:	4b04      	ldr	r3, [pc, #16]	; (8000328 <CLK_Config+0xa4>)
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800031c:	60d3      	str	r3, [r2, #12]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40023800 	.word	0x40023800

0800032c <GPIO_Config>:


void GPIO_Config(void)  // User led configuration
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0x1U << 3U; // D port clock enable
 8000330:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <GPIO_Config+0x3c>)
 8000332:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <GPIO_Config+0x3c>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	f043 0308 	orr.w	r3, r3, #8
 800033a:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= 0x55000000; // D12, D13, D14, D15 is selected output mode
 800033c:	4a0b      	ldr	r2, [pc, #44]	; (800036c <GPIO_Config+0x40>)
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <GPIO_Config+0x40>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000346:	6013      	str	r3, [r2, #0]
	GPIOD->OSPEEDR |= 0xFF000000; // very high speed is selected
 8000348:	4a08      	ldr	r2, [pc, #32]	; (800036c <GPIO_Config+0x40>)
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <GPIO_Config+0x40>)
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000352:	6093      	str	r3, [r2, #8]
	GPIOD->PUPDR |= 0x00000000; // no pull up, pull down
 8000354:	4a05      	ldr	r2, [pc, #20]	; (800036c <GPIO_Config+0x40>)
 8000356:	4b05      	ldr	r3, [pc, #20]	; (800036c <GPIO_Config+0x40>)
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	60d3      	str	r3, [r2, #12]
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40023800 	.word	0x40023800
 800036c:	40020c00 	.word	0x40020c00

08000370 <RTC_Config>:


void RTC_Config(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	PWR->CR |= 1 << 8;				// Disable backup domain write protection
 8000374:	4a24      	ldr	r2, [pc, #144]	; (8000408 <RTC_Config+0x98>)
 8000376:	4b24      	ldr	r3, [pc, #144]	; (8000408 <RTC_Config+0x98>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037e:	6013      	str	r3, [r2, #0]
	RCC->BDCR |= 1 << 15;   		// RTC clock enable
 8000380:	4a22      	ldr	r2, [pc, #136]	; (800040c <RTC_Config+0x9c>)
 8000382:	4b22      	ldr	r3, [pc, #136]	; (800040c <RTC_Config+0x9c>)
 8000384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800038a:	6713      	str	r3, [r2, #112]	; 0x70
	RCC->CSR |= 1 << 0;				// Internal low-speed oscillator enable
 800038c:	4a1f      	ldr	r2, [pc, #124]	; (800040c <RTC_Config+0x9c>)
 800038e:	4b1f      	ldr	r3, [pc, #124]	; (800040c <RTC_Config+0x9c>)
 8000390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6753      	str	r3, [r2, #116]	; 0x74

	//while((RCC->CSR & (1 << 1)) != (RCC->CSR |= (1 << 1)));		// wait to ready LSI

	RCC->BDCR |= 1 << 16;			// Backup domain software reset
 8000398:	4a1c      	ldr	r2, [pc, #112]	; (800040c <RTC_Config+0x9c>)
 800039a:	4b1c      	ldr	r3, [pc, #112]	; (800040c <RTC_Config+0x9c>)
 800039c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800039e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003a2:	6713      	str	r3, [r2, #112]	; 0x70
	RCC->BDCR &= ~(1 << 16);	    // Backup domain software reset is removing
 80003a4:	4a19      	ldr	r2, [pc, #100]	; (800040c <RTC_Config+0x9c>)
 80003a6:	4b19      	ldr	r3, [pc, #100]	; (800040c <RTC_Config+0x9c>)
 80003a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80003aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ae:	6713      	str	r3, [r2, #112]	; 0x70
	RCC->BDCR |= 2 << 8;			// LSI oscillator clock used as the RTC clock
 80003b0:	4a16      	ldr	r2, [pc, #88]	; (800040c <RTC_Config+0x9c>)
 80003b2:	4b16      	ldr	r3, [pc, #88]	; (800040c <RTC_Config+0x9c>)
 80003b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80003b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ba:	6713      	str	r3, [r2, #112]	; 0x70

	RTC->WPR = 0xCA;				// write protection key
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <RTC_Config+0xa0>)
 80003be:	22ca      	movs	r2, #202	; 0xca
 80003c0:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;				// write protection key
 80003c2:	4b13      	ldr	r3, [pc, #76]	; (8000410 <RTC_Config+0xa0>)
 80003c4:	2253      	movs	r2, #83	; 0x53
 80003c6:	625a      	str	r2, [r3, #36]	; 0x24

	RTC->ISR |= 1 << 7;				// Initialization mode
 80003c8:	4a11      	ldr	r2, [pc, #68]	; (8000410 <RTC_Config+0xa0>)
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <RTC_Config+0xa0>)
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d2:	60d3      	str	r3, [r2, #12]

	RTC->CR |= 0 << 8;					// Alarm A disable
 80003d4:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <RTC_Config+0xa0>)
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <RTC_Config+0xa0>)
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	6093      	str	r3, [r2, #8]
	RTC->CR |= 0 << 12;					// Alarm A interrupt disable
 80003dc:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <RTC_Config+0xa0>)
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <RTC_Config+0xa0>)
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	6093      	str	r3, [r2, #8]
	RTC->PRER = (127 << 16) | (249 << 0);		// 32KHz / ((128-1)*(250-1)) = 1Hz = 1s
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <RTC_Config+0xa0>)
 80003e6:	4a0b      	ldr	r2, [pc, #44]	; (8000414 <RTC_Config+0xa4>)
 80003e8:	611a      	str	r2, [r3, #16]

	RTC->ISR &= ~(1 << 7);				// Removing Initialization mode (Normal Mode)
 80003ea:	4a09      	ldr	r2, [pc, #36]	; (8000410 <RTC_Config+0xa0>)
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <RTC_Config+0xa0>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003f4:	60d3      	str	r3, [r2, #12]
	RTC->WPR = 0x03;				// write protection key (random number) disable (locked)
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <RTC_Config+0xa0>)
 80003f8:	2203      	movs	r2, #3
 80003fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40007000 	.word	0x40007000
 800040c:	40023800 	.word	0x40023800
 8000410:	40002800 	.word	0x40002800
 8000414:	007f00f9 	.word	0x007f00f9

08000418 <RTC_Set_Time_BCD>:


void RTC_Set_Time_BCD(uint8_t saat, uint8_t dakika, uint8_t saniye)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
 8000422:	460b      	mov	r3, r1
 8000424:	71bb      	strb	r3, [r7, #6]
 8000426:	4613      	mov	r3, r2
 8000428:	717b      	strb	r3, [r7, #5]
	RTC->WPR = 0xCA;				// write protection key
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <RTC_Set_Time_BCD+0x60>)
 800042c:	22ca      	movs	r2, #202	; 0xca
 800042e:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;				// write protection key
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <RTC_Set_Time_BCD+0x60>)
 8000432:	2253      	movs	r2, #83	; 0x53
 8000434:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->ISR |= 1 << 7;				// Initialization mode
 8000436:	4a10      	ldr	r2, [pc, #64]	; (8000478 <RTC_Set_Time_BCD+0x60>)
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <RTC_Set_Time_BCD+0x60>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000440:	60d3      	str	r3, [r2, #12]
	RTC->TR |= (saat << 16) | (dakika << 8) | (saniye << 0);	  /*(Bits 19:16 HU[3:0]: Hour units in BCD format)
 8000442:	480d      	ldr	r0, [pc, #52]	; (8000478 <RTC_Set_Time_BCD+0x60>)
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <RTC_Set_Time_BCD+0x60>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	79fa      	ldrb	r2, [r7, #7]
 800044a:	0411      	lsls	r1, r2, #16
 800044c:	79ba      	ldrb	r2, [r7, #6]
 800044e:	0212      	lsls	r2, r2, #8
 8000450:	4311      	orrs	r1, r2
 8000452:	797a      	ldrb	r2, [r7, #5]
 8000454:	430a      	orrs	r2, r1
 8000456:	4313      	orrs	r3, r2
 8000458:	6003      	str	r3, [r0, #0]
																	(Bit 11:8 MNU[3:0]: Minute units in BCD format)
																	(Bits 3:0 SU[3:0]: Second units in BCD format)*/

	RTC->ISR &= ~(1 << 7);				// Removing Initialization mode (Normal Mode)
 800045a:	4a07      	ldr	r2, [pc, #28]	; (8000478 <RTC_Set_Time_BCD+0x60>)
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <RTC_Set_Time_BCD+0x60>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000464:	60d3      	str	r3, [r2, #12]
	RTC->WPR = 0x03;				// write protection key (random number) disable (locked)
 8000466:	4b04      	ldr	r3, [pc, #16]	; (8000478 <RTC_Set_Time_BCD+0x60>)
 8000468:	2203      	movs	r2, #3
 800046a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40002800 	.word	0x40002800

0800047c <RTC_Set_Date_BCD>:


void RTC_Set_Date_BCD(uint8_t yil, uint8_t ay, uint8_t gun, uint8_t hafta)
{
 800047c:	b490      	push	{r4, r7}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4604      	mov	r4, r0
 8000484:	4608      	mov	r0, r1
 8000486:	4611      	mov	r1, r2
 8000488:	461a      	mov	r2, r3
 800048a:	4623      	mov	r3, r4
 800048c:	71fb      	strb	r3, [r7, #7]
 800048e:	4603      	mov	r3, r0
 8000490:	71bb      	strb	r3, [r7, #6]
 8000492:	460b      	mov	r3, r1
 8000494:	717b      	strb	r3, [r7, #5]
 8000496:	4613      	mov	r3, r2
 8000498:	713b      	strb	r3, [r7, #4]
	RTC->WPR = 0xCA;				// write protection key
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <RTC_Set_Date_BCD+0x70>)
 800049c:	22ca      	movs	r2, #202	; 0xca
 800049e:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;				// write protection key
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <RTC_Set_Date_BCD+0x70>)
 80004a2:	2253      	movs	r2, #83	; 0x53
 80004a4:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->ISR |= 1 << 7;				// Initialization mode
 80004a6:	4a11      	ldr	r2, [pc, #68]	; (80004ec <RTC_Set_Date_BCD+0x70>)
 80004a8:	4b10      	ldr	r3, [pc, #64]	; (80004ec <RTC_Set_Date_BCD+0x70>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b0:	60d3      	str	r3, [r2, #12]
	RTC->DR |= (yil << 16) | (ay << 8) | (gun << 0) | (hafta << 13);  /*(Bits 19:16 YU[3:0]: Year units in BCD format)
 80004b2:	480e      	ldr	r0, [pc, #56]	; (80004ec <RTC_Set_Date_BCD+0x70>)
 80004b4:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <RTC_Set_Date_BCD+0x70>)
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	79fa      	ldrb	r2, [r7, #7]
 80004ba:	0411      	lsls	r1, r2, #16
 80004bc:	79ba      	ldrb	r2, [r7, #6]
 80004be:	0212      	lsls	r2, r2, #8
 80004c0:	4311      	orrs	r1, r2
 80004c2:	797a      	ldrb	r2, [r7, #5]
 80004c4:	4311      	orrs	r1, r2
 80004c6:	793a      	ldrb	r2, [r7, #4]
 80004c8:	0352      	lsls	r2, r2, #13
 80004ca:	430a      	orrs	r2, r1
 80004cc:	4313      	orrs	r3, r2
 80004ce:	6043      	str	r3, [r0, #4]
																		(Bits 11:8 MU: Month units in BCD format)
																		(Bits 3:0 DU[3:0]: Date units in BCD format)
																		(Bits 15:13 WDU[2:0]: Week day units)*/

	RTC->ISR &= ~(1 << 7);				// Removing Initialization mode (Normal Mode)
 80004d0:	4a06      	ldr	r2, [pc, #24]	; (80004ec <RTC_Set_Date_BCD+0x70>)
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <RTC_Set_Date_BCD+0x70>)
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004da:	60d3      	str	r3, [r2, #12]
	RTC->WPR = 0x03;				// write protection key (random number) disable (locked)
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <RTC_Set_Date_BCD+0x70>)
 80004de:	2203      	movs	r2, #3
 80004e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc90      	pop	{r4, r7}
 80004ea:	4770      	bx	lr
 80004ec:	40002800 	.word	0x40002800

080004f0 <RTC_Set_Alarm_A>:


void RTC_Set_Alarm_A(uint8_t gun, uint8_t saat, uint8_t dakika, uint8_t saniye)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4604      	mov	r4, r0
 80004f8:	4608      	mov	r0, r1
 80004fa:	4611      	mov	r1, r2
 80004fc:	461a      	mov	r2, r3
 80004fe:	4623      	mov	r3, r4
 8000500:	71fb      	strb	r3, [r7, #7]
 8000502:	4603      	mov	r3, r0
 8000504:	71bb      	strb	r3, [r7, #6]
 8000506:	460b      	mov	r3, r1
 8000508:	717b      	strb	r3, [r7, #5]
 800050a:	4613      	mov	r3, r2
 800050c:	713b      	strb	r3, [r7, #4]
	RTC->WPR = 0xCA;				// write protection key
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <RTC_Set_Alarm_A+0xac>)
 8000510:	22ca      	movs	r2, #202	; 0xca
 8000512:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;				// write protection key
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <RTC_Set_Alarm_A+0xac>)
 8000516:	2253      	movs	r2, #83	; 0x53
 8000518:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->ISR |= 1 << 7;				// Initialization mode
 800051a:	4a20      	ldr	r2, [pc, #128]	; (800059c <RTC_Set_Alarm_A+0xac>)
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <RTC_Set_Alarm_A+0xac>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	60d3      	str	r3, [r2, #12]

	RTC->ALRMAR |= (gun << 24) | (saat << 16) | (dakika << 8) | (saniye << 0);    /*(Bits 27:24 DU[3:0]: Date units or day in BCD format.)
 8000526:	481d      	ldr	r0, [pc, #116]	; (800059c <RTC_Set_Alarm_A+0xac>)
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <RTC_Set_Alarm_A+0xac>)
 800052a:	69db      	ldr	r3, [r3, #28]
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	0611      	lsls	r1, r2, #24
 8000530:	79ba      	ldrb	r2, [r7, #6]
 8000532:	0412      	lsls	r2, r2, #16
 8000534:	4311      	orrs	r1, r2
 8000536:	797a      	ldrb	r2, [r7, #5]
 8000538:	0212      	lsls	r2, r2, #8
 800053a:	4311      	orrs	r1, r2
 800053c:	793a      	ldrb	r2, [r7, #4]
 800053e:	430a      	orrs	r2, r1
 8000540:	4313      	orrs	r3, r2
 8000542:	61c3      	str	r3, [r0, #28]
																					(Bits 19:16 HU[3:0]: Hour units in BCD format.)
																					(Bits 11:8 MNU[3:0]: Minute units in BCD format.)
																					(Bits 3:0 SU[3:0]: Second units in BCD format.)*/

	RTC->CR |= 1 << 8;					// Alarm A enable
 8000544:	4a15      	ldr	r2, [pc, #84]	; (800059c <RTC_Set_Alarm_A+0xac>)
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <RTC_Set_Alarm_A+0xac>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054e:	6093      	str	r3, [r2, #8]
	RTC->CR |= 1 << 12;					// Alarm A interrupt Enable
 8000550:	4a12      	ldr	r2, [pc, #72]	; (800059c <RTC_Set_Alarm_A+0xac>)
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <RTC_Set_Alarm_A+0xac>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800055a:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= 1 << 17;				// Interrupt request from line 17 is not masked
 800055c:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <RTC_Set_Alarm_A+0xb0>)
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <RTC_Set_Alarm_A+0xb0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000566:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= 1 << 17;				// Rising trigger enabled (for Event and Interrupt) for input line 17
 8000568:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <RTC_Set_Alarm_A+0xb0>)
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <RTC_Set_Alarm_A+0xb0>)
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ(RTC_Alarm_IRQn);		// RTC alarm A is activated in NVIC
 8000574:	2029      	movs	r0, #41	; 0x29
 8000576:	f7ff fe27 	bl	80001c8 <NVIC_EnableIRQ>
	NVIC_SetPriority(RTC_Alarm_IRQn, 0);
 800057a:	2100      	movs	r1, #0
 800057c:	2029      	movs	r0, #41	; 0x29
 800057e:	f7ff fe3d 	bl	80001fc <NVIC_SetPriority>

	RTC->ISR &= ~(1 << 7);				// Removing Initialization mode (Normal Mode)
 8000582:	4a06      	ldr	r2, [pc, #24]	; (800059c <RTC_Set_Alarm_A+0xac>)
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <RTC_Set_Alarm_A+0xac>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800058c:	60d3      	str	r3, [r2, #12]
	RTC->WPR = 0x03;				// write protection key (random number) disable (locked)
 800058e:	4b03      	ldr	r3, [pc, #12]	; (800059c <RTC_Set_Alarm_A+0xac>)
 8000590:	2203      	movs	r2, #3
 8000592:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bd90      	pop	{r4, r7, pc}
 800059c:	40002800 	.word	0x40002800
 80005a0:	40013c00 	.word	0x40013c00

080005a4 <RTC_Alarm_IRQHandler>:


void RTC_Alarm_IRQHandler()
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	RTC->ISR &= ~(0 << 8);		 // Alarm A flag (This flag is cleared by software by writing 0).
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <RTC_Alarm_IRQHandler+0x20>)
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <RTC_Alarm_IRQHandler+0x20>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	60d3      	str	r3, [r2, #12]
	GPIOD->ODR = 0x0000F000;   // D12, D13, D14, D15 pins set
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <RTC_Alarm_IRQHandler+0x24>)
 80005b2:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80005b6:	615a      	str	r2, [r3, #20]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40002800 	.word	0x40002800
 80005c8:	40020c00 	.word	0x40020c00

080005cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000604 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005d2:	e003      	b.n	80005dc <LoopCopyDataInit>

080005d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005da:	3104      	adds	r1, #4

080005dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005dc:	480b      	ldr	r0, [pc, #44]	; (800060c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005e4:	d3f6      	bcc.n	80005d4 <CopyDataInit>
  ldr  r2, =_sbss
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005e8:	e002      	b.n	80005f0 <LoopFillZerobss>

080005ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005ec:	f842 3b04 	str.w	r3, [r2], #4

080005f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005f4:	d3f9      	bcc.n	80005ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005f6:	f000 f841 	bl	800067c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005fa:	f000 f8f1 	bl	80007e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005fe:	f7ff fe27 	bl	8000250 <main>
  bx  lr    
 8000602:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000604:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000608:	08000848 	.word	0x08000848
  ldr  r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000610:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000614:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000618:	2000001c 	.word	0x2000001c

0800061c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC_IRQHandler>

0800061e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000630:	e7fe      	b.n	8000630 <HardFault_Handler+0x4>

08000632 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000636:	e7fe      	b.n	8000636 <MemManage_Handler+0x4>

08000638 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800063c:	e7fe      	b.n	800063c <BusFault_Handler+0x4>

0800063e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000642:	e7fe      	b.n	8000642 <UsageFault_Handler+0x4>

08000644 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000680:	4a16      	ldr	r2, [pc, #88]	; (80006dc <SystemInit+0x60>)
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x60>)
 8000684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000690:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <SystemInit+0x64>)
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <SystemInit+0x64>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <SystemInit+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006a2:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <SystemInit+0x64>)
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <SystemInit+0x64>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <SystemInit+0x64>)
 80006b4:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <SystemInit+0x68>)
 80006b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006b8:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <SystemInit+0x64>)
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <SystemInit+0x64>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <SystemInit+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80006ca:	f000 f80d 	bl	80006e8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006ce:	4b03      	ldr	r3, [pc, #12]	; (80006dc <SystemInit+0x60>)
 80006d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d4:	609a      	str	r2, [r3, #8]
#endif
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	40023800 	.word	0x40023800
 80006e4:	24003010 	.word	0x24003010

080006e8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80006f6:	4a36      	ldr	r2, [pc, #216]	; (80007d0 <SetSysClock+0xe8>)
 80006f8:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <SetSysClock+0xe8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000700:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000702:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <SetSysClock+0xe8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3301      	adds	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d103      	bne.n	8000720 <SetSysClock+0x38>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800071e:	d1f0      	bne.n	8000702 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000720:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <SetSysClock+0xe8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800072c:	2301      	movs	r3, #1
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	e001      	b.n	8000736 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d142      	bne.n	80007c2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800073c:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <SetSysClock+0xe8>)
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <SetSysClock+0xe8>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000748:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <SetSysClock+0xec>)
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <SetSysClock+0xec>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000752:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000754:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <SetSysClock+0xe8>)
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <SetSysClock+0xe8>)
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800075c:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <SetSysClock+0xe8>)
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <SetSysClock+0xe8>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000766:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000768:	4a19      	ldr	r2, [pc, #100]	; (80007d0 <SetSysClock+0xe8>)
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <SetSysClock+0xe8>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000772:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <SetSysClock+0xe8>)
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <SetSysClock+0xf0>)
 8000778:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <SetSysClock+0xe8>)
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <SetSysClock+0xe8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000784:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000786:	bf00      	nop
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <SetSysClock+0xe8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0f9      	beq.n	8000788 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <SetSysClock+0xf4>)
 8000796:	f240 7205 	movw	r2, #1797	; 0x705
 800079a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800079c:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <SetSysClock+0xe8>)
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <SetSysClock+0xe8>)
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	f023 0303 	bic.w	r3, r3, #3
 80007a6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80007a8:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <SetSysClock+0xe8>)
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <SetSysClock+0xe8>)
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	f043 0302 	orr.w	r3, r3, #2
 80007b2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80007b4:	bf00      	nop
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <SetSysClock+0xe8>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	f003 030c 	and.w	r3, r3, #12
 80007be:	2b08      	cmp	r3, #8
 80007c0:	d1f9      	bne.n	80007b6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000
 80007d8:	07405419 	.word	0x07405419
 80007dc:	40023c00 	.word	0x40023c00

080007e0 <__libc_init_array>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	4e0d      	ldr	r6, [pc, #52]	; (8000818 <__libc_init_array+0x38>)
 80007e4:	4c0d      	ldr	r4, [pc, #52]	; (800081c <__libc_init_array+0x3c>)
 80007e6:	1ba4      	subs	r4, r4, r6
 80007e8:	10a4      	asrs	r4, r4, #2
 80007ea:	2500      	movs	r5, #0
 80007ec:	42a5      	cmp	r5, r4
 80007ee:	d109      	bne.n	8000804 <__libc_init_array+0x24>
 80007f0:	4e0b      	ldr	r6, [pc, #44]	; (8000820 <__libc_init_array+0x40>)
 80007f2:	4c0c      	ldr	r4, [pc, #48]	; (8000824 <__libc_init_array+0x44>)
 80007f4:	f000 f818 	bl	8000828 <_init>
 80007f8:	1ba4      	subs	r4, r4, r6
 80007fa:	10a4      	asrs	r4, r4, #2
 80007fc:	2500      	movs	r5, #0
 80007fe:	42a5      	cmp	r5, r4
 8000800:	d105      	bne.n	800080e <__libc_init_array+0x2e>
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000808:	4798      	blx	r3
 800080a:	3501      	adds	r5, #1
 800080c:	e7ee      	b.n	80007ec <__libc_init_array+0xc>
 800080e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000812:	4798      	blx	r3
 8000814:	3501      	adds	r5, #1
 8000816:	e7f2      	b.n	80007fe <__libc_init_array+0x1e>
 8000818:	08000840 	.word	0x08000840
 800081c:	08000840 	.word	0x08000840
 8000820:	08000840 	.word	0x08000840
 8000824:	08000844 	.word	0x08000844

08000828 <_init>:
 8000828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082a:	bf00      	nop
 800082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800082e:	bc08      	pop	{r3}
 8000830:	469e      	mov	lr, r3
 8000832:	4770      	bx	lr

08000834 <_fini>:
 8000834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000836:	bf00      	nop
 8000838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083a:	bc08      	pop	{r3}
 800083c:	469e      	mov	lr, r3
 800083e:	4770      	bx	lr
